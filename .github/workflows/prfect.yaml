name: Auto-generate PR descriptions with Prfect

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need full history for git analysis
        ref: ${{ github.head_ref }} # Checkout the PR branch
        
    - name: Setup git branches
      run: |
        # Debug current state
        echo "=== Git Repository State ==="
        git remote -v
        git branch -a
        echo "Default branch: $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"
        
        # Ensure we have the target branch locally
        TARGET_BRANCH="${{ github.base_ref }}"
        echo "Target branch: $TARGET_BRANCH"
        
        # Fetch and create target branch if it doesn't exist locally
        if ! git show-ref --verify --quiet refs/heads/$TARGET_BRANCH; then
          echo "Creating local branch $TARGET_BRANCH from origin/$TARGET_BRANCH"
          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH || {
            echo "Failed to fetch $TARGET_BRANCH, trying to fetch all branches"
            git fetch origin
            git branch -r | grep "origin/$TARGET_BRANCH" || {
              echo "Target branch $TARGET_BRANCH not found in remote, using default branch"
              DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
              git checkout -b $TARGET_BRANCH origin/$DEFAULT_BRANCH
            }
          }
        fi
        
        echo "=== Final Branch State ==="
        git branch -a
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh
        
    - name: Start Ollama service
      run: |
        ollama serve &
        sleep 5 # Wait for service to start
        
    - name: Pull AI model
      run: |
        ollama pull qwen3:latest # Fast, lightweight model for CI
        
    - name: Install Prfect dependencies
      run: |
        bun install
        
    - name: Build Prfect
      run: |
        bun run build
        
    - name: Generate PR description
      id: generate
      run: |
        # Verify branches exist before running Prfect
        echo "Checking git setup..."
        git branch -a
        echo "Current branch: $(git branch --show-current)"
        echo "Source: ${{ github.head_ref }}, Target: ${{ github.base_ref }}"
        
        # Ensure we're on the correct branch
        git checkout ${{ github.head_ref }} || echo "Already on source branch"
        
        # Generate PR data using Prfect CI mode
        echo "Running Prfect in CI mode..."
        PR_DATA=$(node dist/index.js --ci \
          --source ${{ github.head_ref }} \
          --target ${{ github.base_ref }} \
          --model qwen3:latest \
          --no-emojis)
        
        echo "Generated PR data:"
        echo "$PR_DATA"
        
        # Extract title and body using jq
        TITLE=$(echo "$PR_DATA" | jq -r '.title')
        BODY=$(echo "$PR_DATA" | jq -r '.body')
        
        # Escape newlines for GitHub Actions output
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        
        # Set outputs for next step
        echo "title=$TITLE" >> $GITHUB_OUTPUT
        echo "body=$BODY" >> $GITHUB_OUTPUT
        
        # Debug: Show what was generated
        echo "Generated Title: $TITLE"
        echo "Generated Body: $BODY"
        
    - name: Update PR title and description
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Update the PR title and body
        gh pr edit ${{ github.event.pull_request.number }} \
          --title "${{ steps.generate.outputs.title }}" \
          --body "${{ steps.generate.outputs.body }}"
          
        echo "âœ… PR title and description updated successfully!"
        
    - name: Add comment with generation info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body "ðŸ¤– **PR description auto-generated by Prfect**

        This pull request description was automatically generated using AI analysis of your git commits and code changes.
        
        **Model used:** qwen3:latest
        **Source:** ${{ github.head_ref }} â†’ ${{ github.base_ref }}
        **Generated at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        If you'd like to modify the description, feel free to edit it manually."
        